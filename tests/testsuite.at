m4_include([package.m4])

# The template file used to create the input files for besstandalone
m4_define([bescmd_template], [$srcdir/template.bescmd.in])
m4_define([datadir], [/data/ncml])

AT_INIT([ncml autotest testsuite])

dnl $1 == ncml_filename
dnl $2 == {das | dds | dods | ddx }
m4_define([AT_MAKE_BESCMD_FILE],
[
echo "Replacing %ncml_filename% with datadir/$1 to create test.bescmd..."
sed -e "s:%ncml_filename%:datadir/$1:" -e "s:%response_type%:$2:" < bescmd_template > test.bescmd
])

dnl Run the besstandlone on the filename for the response type
dnl and compare stdout to the baseline for the response.
dnl ncml_filename is expected to be the basename as the datadir is added.
dnl $1 == ncml_filename
dnl $2 == {das | dds | dods | ddx }
m4_define([AT_RUN_BES_AND_COMPARE_BASELINE],
[
AT_SETUP([Comparing $2 response for $1 to baseline...])
AT_KEYWORDS([$2])
AT_MAKE_BESCMD_FILE([$1], [$2])
AT_CHECK([besstandalone -c $top_srcdir/bes-testsuite/bes.conf -i ./test.bescmd], [], [stdout], [ignore])
AT_CHECK([diff -w -b -B $srcdir/baselines/$1.$2 stdout], [], [ignore], [], [])
AT_CLEANUP
])

dnl Run the besstandalone for the response type and log to stdout,
dnl then do a string match on stdout to $3 to find a pattern.
dnl Useful for checking for Parse Errors, etc.
dnl $1 == ncml_filename
dnl $2 ==  {das | dds | dods | ddx }
dnl $3 == "pattern"
m4_define([AT_RUN_BES_AND_MATCH],
[
AT_SETUP([$2 response for $1])
AT_KEYWORDS([$2])
AT_MAKE_BESCMD_FILE([$1], [$2])
AT_CHECK([besstandalone -c $top_srcdir/bes-testsuite/bes.conf -i ./test.bescmd], [], [stdout], [ignore])
AT_CHECK([fgrep $3 stdout], [], [ignore], [], [])
AT_CLEANUP
])

dnl Syntactic sugar
m4_define([AT_CHECK_DAS],
[AT_RUN_BES_AND_COMPARE_BASELINE([$1], [das])
])

m4_define([AT_CHECK_DDS],
[AT_RUN_BES_AND_COMPARE_BASELINE([$1], [dds])
])

m4_define([AT_CHECK_DDX],
[AT_RUN_BES_AND_COMPARE_BASELINE([$1], [ddx])
])

m4_define([AT_CHECK_DATADDS],
[AT_RUN_BES_AND_COMPARE_BASELINE([$1], [dods])
])

m4_define([AT_CHECK_ALL_DAP_RESPONSES],
[AT_BANNER([Testing DAP responses for: $1])
AT_CHECK_DAS($1)
AT_CHECK_DDS($1)
AT_CHECK_DDX($1)
AT_CHECK_DATADDS($1)
])

dnl tests that the response is a parse error when asking for DDX.
dnl $1 is ncml_filename
m4_define([AT_ASSERT_PARSE_ERROR],
[AT_BANNER([Testing that $1 contains a ParseError...])
AT_RUN_BES_AND_MATCH([$1], ["ddx"], ["ParseError"])
])

######################################################
# The actual tests!

dnl A known test copied from bes-testsuite to make sure this Autotest file works.
dnl AT_CHECK_ALL_DAP_RESPONSES([fnoc1_explicit.ncml])

dnl An example of testing for a parse error.
dnl AT_RUN_BES_AND_MATCH([fnoc1_explicit.ncml], [das], ["ParseError"])

dnl Test the renaming of an existing variable
AT_CHECK_ALL_DAP_RESPONSES([var_orgName.ncml])
dnl orgName doesnt exist should error
AT_ASSERT_PARSE_ERROR([var_orgName_err_1.ncml])
dnl name already exists should error
AT_ASSERT_PARSE_ERROR([var_orgName_err_2.ncml])

