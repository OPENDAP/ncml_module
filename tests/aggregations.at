dnl Test suite containing tests that don't fit another file
AT_BANNER([------------------  AGGREGATION TESTS -----------------------])

dnl Here we try to change the values of an existing variable, which is disallowed in this version
AT_ASSERT_PARSE_ERROR([agg/error_multi_aggs.ncml])
AT_ASSERT_PARSE_ERROR([agg/error_improper_netcdf_loc.ncml])
AT_ASSERT_PARSE_ERROR([agg/error_agg_in_wrong_loc_1.ncml])
AT_ASSERT_PARSE_ERROR([agg/error_agg_in_wrong_loc_2.ncml])

dnl UNION : Acceptance tests on attributes and variables for union
dnl First, test a basic purely virtual dataset one level deep aggregates correctly.
AT_CHECK_ALL_DAP_RESPONSES([agg/virtual_union.ncml])
AT_CHECK_DATADDS_GETDAP([agg/virtual_union.ncml])

dnl TODO test a two level nest to make sure that works correctly
AT_CHECK_ALL_DAP_RESPONSES([agg/multi_nested_unions.ncml])
AT_CHECK_DATADDS_GETDAP([agg/multi_nested_unions.ncml])

dnl TODO test that NcML transformations can be applied to data AFTER
dnl it has been aggregated.  
AT_CHECK_ALL_DAP_RESPONSES([agg/modify_post_union.ncml])
AT_CHECK_DATADDS_GETDAP([agg/modify_post_union.ncml])

dnl Test from the Unidata NCML Aggregation tutorial
AT_CHECK_ALL_DAP_RESPONSES([agg/aggUnionSimple.ncml])

dnl----------------- Dimensions ---------------------------
dnl Test example virtual datasets with dimensions.

dnl Check that a union with correct matching dimensions works
dnl Technically, there's nothing to check since the dims are used 
dnl inside the child datasets to generate data, and not otherwise...
dnl Only shared would technically need to match, but DAP2 doesn't have them yet...
AT_CHECK_ALL_DAP_RESPONSES([agg/union_with_dimensions.ncml])
AT_CHECK_DATADDS_GETDAP([agg/union_with_dimensions.ncml])

dnl Check parse error on a dimension mismatch in the union
dnl This is where we'd have to make the error...  We're not
dnl going to traverse into DAP objects to check dimensions for now...
AT_ASSERT_PARSE_ERROR([agg/union_dimension_mismatch_error.ncml])

dnl ------------ joinNew -----------------

dnl Test the parse error branches
dnl Test that not having an aggregation variable in all datasets is an error
AT_ASSERT_PARSE_ERROR([agg/joinNew_error_1.ncml])
dnl Test that datasets not all matching type is an error
AT_ASSERT_PARSE_ERROR([agg/joinNew_error_2.ncml])
dnl Test datasets not matching shapes is an error
AT_ASSERT_PARSE_ERROR([agg/joinNew_error_3.ncml])
dnl Test datasets not matching dimension length is error
AT_ASSERT_PARSE_ERROR([agg/joinNew_error_4.ncml])

dnl Tests for simple joinNew aggregation 
AT_CHECK_ALL_DAP_RESPONSES([agg/joinNew_simple.ncml])
AT_CHECK_DATADDS_GETDAP([agg/joinNew_simple.ncml])

dnl Another example with more datasets
AT_CHECK_ALL_DAP_RESPONSES([agg/joinNew_simple_2.ncml])
AT_CHECK_DATADDS_GETDAP([agg/joinNew_simple_2.ncml])

dnl Another with more than one aggregation variable
AT_CHECK_ALL_DAP_RESPONSES([agg/joinNew_simple_3.ncml])
AT_CHECK_DATADDS_GETDAP([agg/joinNew_simple_3.ncml])

dnl =======================================================
dnl Test constraints on the virtual dataset aggs

dnl Test that the outer dimension slices match the original datasets
AT_CHECK_ALL_DAP_RESPONSES_WITH_CONSTRAINT([agg/joinNew_simple.ncml],[[ V[0][0:4] ]], [agg/joinNew_simple_cons_1.ncml])
AT_CHECK_ALL_DAP_RESPONSES_WITH_CONSTRAINT([agg/joinNew_simple.ncml],[[ V[1][0:4] ]], [agg/joinNew_simple_cons_2.ncml])

dnl Test grabbing a slice from the "middle" of an aggregated set
AT_CHECK_ALL_DAP_RESPONSES_WITH_CONSTRAINT([agg/joinNew_simple_2.ncml],[[ V[2][1:2] ]], [agg/joinNew_simple_2_cons_1.ncml])

dnl Grab two separate dataset slices from the middle
AT_CHECK_ALL_DAP_RESPONSES_WITH_CONSTRAINT([agg/joinNew_simple_2.ncml],[[ V[1:2][0:4] ]], [agg/joinNew_simple_2_cons_2.ncml])

dnl Grab an outside dimension slice of just one entry (second entry of all datasets)
AT_CHECK_ALL_DAP_RESPONSES_WITH_CONSTRAINT([agg/joinNew_simple_2.ncml],[[ V[0:3][1] ]], [agg/joinNew_simple_2_cons_3.ncml])

dnl Test a Netcdf Array aggregation, in this case three fnoc1.nc appended together as a joinNew
AT_CHECK_ALL_DAP_RESPONSES([agg/netcdf_joinNew.ncml])
AT_CHECK_ALL_DAP_RESPONSES_WITH_CONSTRAINT([agg/netcdf_joinNew.ncml],[[ u[1][0][10:11][10:11] ]], [agg/netcdf_joinNew_cons_1.ncml])

dnl Test with HDF5 Datasets
AT_CHECK_ALL_DAP_RESPONSES([agg/joinNew_hdf5.ncml])

dnl TODO Test with HDF4

dnl TODO support for Grid and coordValue for the new map vector.



